library(rvest)

url <- "http://www.bobaedream.co.kr/cyber/CyberCar.php?gubun=K&page=1" 
usedCar <- read_html(url) #해당 url 페이지의 html tag를 가져와서 parsing함. 
usedCar

#parsing한 usedCar 에서 css가 'carinfo' 인 것을 찾아라. 
carInfos <- html_nodes(usedCar, css='.carinfo') 
head(carInfos)

#가장 첫번째 cafInfos로부터 정보 추출해보면, 
carInfos[1] %>% html_nodes('.title') %>% html_text()

#먼저 첫페이지의 모든 제목 정보를 가져오는 명령어는 
titles <- carInfos %>% html_nodes('.title') %>% html_text() 
head(titles)

## [1] "쌍용 티볼리 에어 1.6 디젤 IX" 

carDetainInfo <- carInfos %>% html_nodes('.sub_01') %>% html_text() 
head(carDetainInfo)

library(stringr) 
splitFunction <- function(row){ 
	return(str_split(row, 'ㅣ')[[1]]) 
	} 
carDetailInfo <- lapply(carInfos %>% html_nodes('.sub_01') %>% html_text(), splitFunction) 
head(carDetailInfo)


## [1] "자동ㅣ디젤ㅣ3,700 km" "자동ㅣ가솔린ㅣ104,000 km"
#install.packages('stringr')
#패키지 설치 - 문자열 처리 패키지 
#str_split(carInfos[1] %>% html_nodes('.sub_01') %>% html_text(), 'ㅣ')
#str_replace('20,000km', '0', '')
#str_replace_all('20,000km', '0', '')
#str_replace_all('100,운용리스','[,가-하]','') #한글도 마찬가지로 가~하까지 모두


#각각의 데이터를 하나의 자료구조 즉, data.frame 형태로 바꿔야 겠죠. 먼저, 가져온 carDetailInfo는 list이기 때문에 이를 matrix로 바꾸면

carDetailInfo <- matrix(unlist(carDetailInfo), ncol=3, byrow=T) 
head(carDetailInfo)


#그리고 carDetailInfo 로부터 각각의 정보를 가져오자 
transmission <- carDetailInfo[,1] 
fuel <- carDetailInfo[,2] 
distance <- as.numeric(str_replace_all(carDetailInfo[,3], '[,a-z]','')) #숫자 형태로 바꿔주기 위해

# 첫페이지 수집정보는 data.frame으로 저장됨
data <- data.frame(titles, transmission, fuel, distance) 
head(data)

#아래 paste0 함수를 사용하여 뒤에 숫자만 바꿔주면서 수집하면 됩니다. 
url <- paste0("http://www.bobaedream.co.kr/cyber/CyberCar.php?gubun=K&page=",i)




